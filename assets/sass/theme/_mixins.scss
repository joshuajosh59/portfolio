// This file is NOT automatically converted and must be manually merged
@function contrast-color($color, $dark: $contrasted-dark-default, $light: $contrasted-light-default, $threshold: null) {
  @if $threshold {
    // Deprecated in Compass 0.13
    @warn "The $threshold argment to contrast-color is no longer needed and will be removed in the next release.";
  }

  @if $color == null {
    @return null;
  }
  @else {
    $color-brightness: brightness($color);
    $dark-text-brightness: brightness($dark);
    $light-text-brightness: brightness($light);

    @return if(abs($color-brightness - $light-text-brightness) > abs($color-brightness - $dark-text-brightness), $light, $dark);
  }
}

@function brightness($color) {
  @if type-of($color) == color {
    @return (red($color) * 0.299 + green($color) * 0.587 + blue($color) * 0.114) / 255 * 100%;
  }
  @else {
    @return unquote("brightness(#{$color})");
  }
}

// Placeholder text
@mixin material-placeholder {
  &::-moz-placeholder {
    @content;
  }

  // Firefox
  &:-ms-input-placeholder {
    @content;
  }

  // Internet Explorer 10+
  &::-webkit-input-placeholder {
    @content;
  }

  // Safari and Chrome
}

// variations(unquote(""), background-color, #FFF);
@mixin variations($component, $selector-suffix, $mdb-param-1, $color-default) {
  @include generic-variations($component, $selector-suffix, $color-default, "variations-content", $mdb-param-1);
}

@mixin variations-content($args) {
  //@debug "#{map-get($args, mixin-name)}{ #{map-get($args, material-param-1)}: #{map-get($args, variation-color)}; }";
  //@debug "#{inspect($args)}";
  //@error "break here";
  #{map-get($args, material-param-1)}: map-get($args, variation-color);
}

@mixin background-variations($component, $selector-suffix, $color-default) {
  @include generic-variations($component, $selector-suffix, $color-default, "background-variations-content", null);
}

@mixin background-variations-content($args) {
  background-color: map-get($args, variation-color);

  @if map-get($args, variation-color) == $mdb-btn-background-color {
    color: $mdb-text-color-primary;
  }
  @else {
    color: map-get($args, variation-color-text);
  }
}

//@mixin text-variations($component, $selector-suffix, $color-default) {
//  @include generic-variations($component, $selector-suffix, $color-default, "text-variations-content", null);
//}
//
//@mixin text-variations-content($args) {
//  color: map-get($args, variation-color);
//}

@mixin button-variations($component, $selector-suffix, $color-default) {
  @include generic-variations($component, $selector-suffix, $color-default, "button-variations-content", 4%);
}

@mixin button-variations-content($args) {
  //@debug "#{inspect($args)}";
  $variation-color: map-get($args, variation-color);
  $mdb-param-1: map-get($args, material-param-1);

  background-color: contrast-color($variation-color, darken($variation-color, $mdb-param-1), lighten($variation-color, $mdb-param-1));
}

//@mixin bg-color-variations($component, $selector-suffix, $color-default, $mdb-param-1) {
//  @include generic-variations($component, $selector-suffix, $color-default, "bg-color-variations-content", $mdb-param-1);
//}
//
//@mixin bg-color-variations-content($args) {
//  background-color: rgba(map-get($args, variation-color), map-get($args, material-param-1));
//}
//
//// bg-box-shadow-variations(" label input[type=checkbox]:checked + .toggle:active:after", $brand-primary
//@mixin bg-box-shadow-variations($component, $selector-suffix, $color-default) {
//  @include generic-variations($component, $selector-suffix, $color-default, "bg-box-shadow-variations-content", null);
//}
//
//@mixin bg-box-shadow-variations-content($args){
//  $variation-color: map-get($args, variation-color);
//  box-shadow: 0 1px 3px 1px rgba(0,0,0,0.4), 0 0 0 15px rgba($variation-color, (10/100));
//}
//
//// bg-img-variations(" label input[type=checkbox]:checked + .toggle:active:after", $brand-primary
//@mixin bg-img-variations($component, $selector-suffix, $color-default) {
//  @include generic-variations($component, $selector-suffix, $color-default, "bg-img-variations-content", null);
//}
//
//@mixin bg-img-variations-content($args){
//  $variation-color: map-get($args, variation-color);
//  //@debug "bg-img-variations-content called for #{map-get($args, extra)} #{map-get($args, default)} #{map-get($args, variation-color-name)} #{map-get($args, variation-color)}"; //#{inspect($args)}";
//  background-image: linear-gradient($variation-color, $variation-color), linear-gradient($mdb-input-underline-color, $mdb-input-underline-color);
//}

// navbar-variations(" label input[type=checkbox]:checked + .toggle:active:after", $brand-primary
@mixin navbar-variations($component, $selector-suffix, $color-default) {
  @include generic-variations($component, $selector-suffix, $color-default, "navbar-variations-content", null);
}

@mixin navbar-variations-content($args) {
  $variation-color: map-get($args, variation-color);
  $variation-color-text: map-get($args, variation-color-text);

  background-color: $variation-color;
  color: $variation-color-text;

  // deeply defined to override welljumbo class without !impotant need
  .navbar-form .form-group input.form-control,
  .navbar-form input.form-control {
    @include material-placeholder {
      color: $variation-color-text;
    }
  }

  .dropdown-menu {
    @include border-radius(0, 0, 3px, 3px);

    li > a {
      font-size: $mdb-dropdown-font-size;
      padding: 13px 16px;

      &:hover,
      &:focus {
        color: $variation-color;
        background-color: $grey-200;
      }
    }

    .active > a {
      &:hover,
      &:focus {
        color: $variation-color-text;
      }

      background-color: $variation-color;
      color: $variation-color-text;
    }
  }
}

// alert-variations("", $brand-primary)
@mixin alert-variations($component, $selector-suffix, $color-default) {
  @include generic-variations($component, $selector-suffix, $color-default, "alert-variations-content", null);
}

@mixin alert-variations-content($args) {
  $variation-color: map-get($args, variation-color);
  $variation-color-text: map-get($args, variation-color-text);

  background-color: $variation-color;
  color: $variation-color-text;

  a, .alert-link {
    color: $variation-color-text;
  }
}

// interpolation of mixin-name is not allowed evidently, so we statically include based on the mixin-name given
@mixin call-variations-content-mixin($args) {
  $mixin-name: map-get($args, mixin-name);

  @if $mixin-name == variations-content {
    @include variations-content($args);
  }
  @else if $mixin-name == background-variations-content {
    @include background-variations-content($args);
  }
  @else if $mixin-name == text-variations-content {
    @include text-variations-content($args);
  }
  @else if $mixin-name == button-variations-content {
    @include button-variations-content($args);
  }
  @else if $mixin-name == bg-color-variations-content {
    @include bg-color-variations-content($args);
  }
  @else if $mixin-name == bg-box-shadow-variations-content {
    @include bg-box-shadow-variations-content($args);
  }
  @else if $mixin-name == bg-img-variations-content {
    @include bg-img-variations-content($args);
  }
  @else if $mixin-name == navbar-variations-content {
    @include navbar-variations-content($args);
  }
  @else if $mixin-name == alert-variations-content {
    @include alert-variations-content($args);
  }
  @else {
    @error "Unknown mixin: #{$mixin-name}";
  }
}

//
// To use this mixin you should pass a function as final parameter to define
// the style. In that definition you can use the following variables to define it.
//
// $variation-color-name ---> "red", "green", "indigo" ...
// $variation-color-full-name ---> "red", "green-50", "indigo-400" ...
// $variation-color ---> #f44336, #e8f5e9, #5c6bc0 ...
// $variation-color-text ---> rgba(255,255,255,0.84), rgba(0,0,0,0.84), rgba(255,255,255,0.84) ...
//

@mixin generic-variations($component, $selector-suffix, $color-default, $mixin-name, $mdb-param-1) {
  //setup map to pass parameters (instead of the incredibly long-error-prone list for each and every @include)
  $args: (mixin-name: $mixin-name, material-param-1: $mdb-param-1);

  // bootstrap styles
  &#{$selector-suffix},
  &#{$component}-default#{$selector-suffix} {
    $args-extra: map-merge($args, (variation-color: $color-default, variation-color-text: $mdb-text-color-light));

    @include call-variations-content-mixin($args-extra);
  }

  &#{$component}-inverse#{$selector-suffix} {
    $args-inverse: map-merge($args, (variation-color: $mdb-brand-inverse, variation-color-text: contrast-color($mdb-brand-inverse, $mdb-text-color-primary-hex, $mdb-text-color-light-hex)));

    @include call-variations-content-mixin($args-inverse);
  }

  &#{$component}-primary#{$selector-suffix} {
    $args-primary: map-merge($args, (variation-color: $brand-primary, variation-color-text: $mdb-text-color-light));

    @include call-variations-content-mixin($args-primary);
  }

  &#{$component}-success#{$selector-suffix} {
    $args-success: map-merge($args, (variation-color: $brand-success, variation-color-text: $mdb-text-color-light));

    @include call-variations-content-mixin($args-success);
  }

  &#{$component}-info#{$selector-suffix} {
    $args-info: map-merge($args, (variation-color: $brand-info, variation-color-text: $mdb-text-color-light));

    @include call-variations-content-mixin($args-info);
  }

  &#{$component}-warning#{$selector-suffix} {
    $args-warning: map-merge($args, (variation-color: $brand-warning, variation-color-text: $mdb-text-color-light));

    @include call-variations-content-mixin($args-warning);
  }

  &#{$component}-danger#{$selector-suffix} {
    $args-danger: map-merge($args, (variation-color: $brand-danger, variation-color-text: $mdb-text-color-light));

    @include call-variations-content-mixin($args-danger);
  }
}

// BREAKPOINT = Used for responsive breakpoints
// --------------------------------------------------
@mixin breakpoint($media) {
  @if $media == xxs {
    @media (max-width: 480px) {
      @content;
    }
  }
  @else if $media == xs {
    @media (max-width: 767px) {
      @content;
    }
  }
  @else if $media == smmax {
    @media (max-width: 979px) {
      @content;
    }
  }
  @else if $media == sm {
    @media (min-width: 768px) and (max-width: 979px) {
      @content;
    }
  }
  @else if $media == mdmax {
    @media (max-width: 1199px) {
      @content;
    }
  }
  @else if $media == md {
    @media (min-width: 980px) and (max-width: 1199px) {
      @content;
    }
  }
  @else if $media == lg {
    @media (min-width: 1200px) {
      @content;
    }
  }
  @else {
    @media only screen and (max-width: #{$media}px) {
      @content;
    }
  }
}

@mixin shadow-z-1 {
  box-shadow: 0 1px 6px 0 rgba(0, 0, 0, 0.12), 0 1px 6px 0 rgba(0, 0, 0, 0.12);
}

@mixin shadow-z-1-hover {
  box-shadow: 0 5px 11px 0 rgba(0, 0, 0, 0.18), 0 4px 15px 0 rgba(0, 0, 0, 0.15);
}

@mixin shadow-z-2 {
  box-shadow: 0 8px 17px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);
}

@mixin shadow-z-3 {
  box-shadow: 0 12px 15px 0 rgba(0, 0, 0, 0.24), 0 17px 50px 0 rgba(0, 0, 0, 0.19);
}

@mixin shadow-z-4 {
  box-shadow: 0 16px 28px 0 rgba(0, 0, 0, 0.22), 0 25px 55px 0 rgba(0, 0, 0, 0.21);
}

@mixin shadow-z-5 {
  box-shadow: 0 27px 24px 0 rgba(0, 0, 0, 0.2), 0 40px 77px 0 rgba(0, 0, 0, 0.22);
}

/* Shadows (from mdl http://www.getmdl.io/) */

// Focus shadow mixin.
@mixin focus-shadow {
  box-shadow: 0 0 8px rgba(0, 0, 0, 0.18), 0 8px 16px rgba(0, 0, 0, 0.36);
}

@mixin shadow-2dp {
  box-shadow: 0 2px 2px 0 rgba(0, 0, 0, $mdb-shadow-key-penumbra-opacity), 0 3px 1px -2px rgba(0, 0, 0, $mdb-shadow-key-umbra-opacity), 0 1px 5px 0 rgba(0, 0, 0, $mdb-shadow-ambient-shadow-opacity);
}

@mixin shadow-3dp {
  box-shadow: 0 3px 4px 0 rgba(0, 0, 0, $mdb-shadow-key-penumbra-opacity), 0 3px 3px -2px rgba(0, 0, 0, $mdb-shadow-key-umbra-opacity), 0 1px 8px 0 rgba(0, 0, 0, $mdb-shadow-ambient-shadow-opacity);
}

@mixin shadow-4dp {
  box-shadow: 0 4px 5px 0 rgba(0, 0, 0, $mdb-shadow-key-penumbra-opacity), 0 1px 10px 0 rgba(0, 0, 0, $mdb-shadow-ambient-shadow-opacity), 0 2px 4px -1px rgba(0, 0, 0, $mdb-shadow-key-umbra-opacity);
}

@mixin shadow-6dp {
  box-shadow: 0 6px 10px 0 rgba(0, 0, 0, $mdb-shadow-key-penumbra-opacity), 0 1px 18px 0 rgba(0, 0, 0, $mdb-shadow-ambient-shadow-opacity), 0 3px 5px -1px rgba(0, 0, 0, $mdb-shadow-key-umbra-opacity);
}

@mixin shadow-8dp {
  box-shadow: 0 8px 10px 1px rgba(0, 0, 0, $mdb-shadow-key-penumbra-opacity), 0 3px 14px 2px rgba(0, 0, 0, $mdb-shadow-ambient-shadow-opacity), 0 5px 5px -3px rgba(0, 0, 0, $mdb-shadow-key-umbra-opacity);
}

@mixin shadow-16dp {
  box-shadow: 0 16px 24px 2px rgba(0, 0, 0, $mdb-shadow-key-penumbra-opacity), 0 6px 30px 5px rgba(0, 0, 0, $mdb-shadow-ambient-shadow-opacity), 0 8px 10px -5px rgba(0, 0, 0, $mdb-shadow-key-umbra-opacity);
}

@mixin shadow-24dp {
  box-shadow: 0 9px 46px 8px rgba(0, 0, 0, $mdb-shadow-key-penumbra-opacity), 0 11px 15px -7px rgba(0, 0, 0, $mdb-shadow-ambient-shadow-opacity), 0 24px 38px 3px rgba(0, 0, 0, $mdb-shadow-key-umbra-opacity);
}

// BACKGROUND-IMAGE = Static bg image
// --------------------------------------------------
@mixin background-image($url) {
  background-image: url($url);
  background-repeat: no-repeat;
  background-size: 100% auto;
  background-position: inherit;
  background-color: transparent;
}

// BG-IMAGE = Full size bg image
// --------------------------------------------------
@mixin bg-image {
  background-repeat: no-repeat;
  background-size: 100% auto;
  background-position: inherit;
  background-color: transparent;
}

// BG-PARALLAX = Parallax scroll bg image
// --------------------------------------------------
@mixin bg-parallax($url) {
  background-repeat: no-repeat;
  background-size: cover;
  background-position: center center;
  background-color: transparent;
  background-attachment: fixed;
  background-image: url($url);

  @include breakpoint(sm) {
    background-attachment: scroll;
  }
}

// BG-PARALLAX-OVERLAY = Parallax scroll bg image overlay
// --------------------------------------------------
@mixin bg-parallax-overlay {
  content: "";
  height: 100%;
  left: 0;
  top: 0;
  position: absolute;
  width: 100%;
  z-index: 0;
}

// BORDER-RADIUS = Rounding borders
// --------------------------------------------------
@mixin border-radius($a, $b, $c, $d) {
  border-radius: $a $b $c $d;
  -webkit-border-radius: $a $b $c $d;
}

// VERTICAL-ALIGN = Position vertical align
// --------------------------------------------------
@mixin vertical-align($valign) {
  float: none;
  display: table-cell;
  vertical-align: $valign;
}

// IMG-RESPONSIVE = Responsive image mixin
// --------------------------------------------------
@mixin img-responsive {
  display: block;
  height: auto;
  max-width: 100%;
  width: 100%;
}

// POSITION-ABSOLUTE = Absolute pos mixin for overlays
// --------------------------------------------------
@mixin position-absolute($index) {
  position: absolute;
  z-index: $index;
  left: 0;
  top: 0;
}

// OPACITY = Cross browser opacity mixin
// --------------------------------------------------
@mixin opacity($opacity) {
  opacity: $opacity;

  $opacity-ie: $opacity * 100;

  filter: alpha(opacity = $opacity-ie);

  //IE8
}

// ANIMATION-DELAY = Cross browser animation delay
// --------------------------------------------------
@mixin animation-delay($sec) {
  -webkit-animation-delay: $sec;
  -moz-animation-delay: $sec;
  -ms-animation-delay: $sec;
  -o-animation-delay: $sec;
  animation-delay: $sec;
}

// ANIMATION-DURATION = Cross browser animation duration
// --------------------------------------------------
@mixin animation-duration($sec) {
  -webkit-animation-duration: $sec;
  -moz-animation-duration: $sec;
  -ms-animation-duration: $sec;
  -o-animation-duration: $sec;
  animation-duration: $sec;
}

// TRANSITION = Cross browser transition ease
// --------------------------------------------------
@mixin transition($sec) {
  -webkit-transition: all $sec ease-in-out;
  -moz-transition: all $sec ease-in-out;
  -ms-transition: all $sec ease-in-out;
  -o-transition: all $sec ease-in-out;
  transition: all $sec ease-in-out;
}

// TRANSITION DURATION = Cross browser transition duration
// --------------------------------------------------
@mixin transition-duration($sec) {
  -webkit-transition-duration: $sec;
  -moz-transition-duration: $sec;
  -ms-transition-duration: $sec;
  -o-transition-duration: $sec;
  transition-duration: $sec;
}

// SCALE = Cross browser scale transform
// --------------------------------------------------
@mixin scale($val) {
  -webkit-transform: scale($val);
  -moz-transform: scale($val);
  -ms-transform: scale($val);
  -o-transform: scale($val);
  transform: scale($val);
}

// TRANSLATEY = Cross browser translateY transform
// --------------------------------------------------
@mixin translateY($val) {
  -webkit-transform: translateY($val);
  -moz-transform: translateY($val);
  -ms-transform: translateY($val);
  -o-transform: translateY($val);
  transform: translateY($val);
}

// TRANSLATEX = Cross browser translateX transform
// --------------------------------------------------
@mixin translateX($val) {
  -webkit-transform: translateX($val);
  -moz-transform: translateX($val);
  -ms-transform: translateX($val);
  -o-transform: translateX($val);
  transform: translateX($val);
}

// TRANSLATE3D = Cross browser translate3d transform
// --------------------------------------------------
@mixin translate3d($x, $y, $z) {
  -webkit-transform: translate3d($x, $y, $z);
  -moz-transform: translate3d($x, $y, $z);
  -ms-transform: translate3d($x, $y, $z);
  -o-transform: translate3d($x, $y, $z);
  transform: translate3d($x, $y, $z);
}

// ROTATEY = Cross browser rotateY transform
// --------------------------------------------------
@mixin rotateY($val) {
  -webkit-transform: rotateY($val);
  -moz-transform: rotateY($val);
  -ms-transform: rotateY($val);
  -o-transform: rotateY($val);
  transform: rotateY($val);
}

// ROTATE = Cross browser rotate transform
// --------------------------------------------------
@mixin rotate($val) {
  -webkit-transform: rotate($val);
  -moz-transform: rotate($val);
  -ms-transform: rotate($val);
  -o-transform: rotate($val);
  transform: rotate($val);
}

// ORIGIN = Cross browser transform origin
// --------------------------------------------------
@mixin transform_origin($x, $y) {
  -webkit-transform-origin: $x, $y;
  -moz-transform-origin: $x, $y;
  -ms-transform-origin: $x, $y;
  -o-transform-origin: $x, $y;
  transform-origin: $x, $y;
}

// CHILDRENS = Helpers for targeting childs
// --------------------------------------------------
@mixin last-child {
  &:last-child {
    @content;
  }

  &.last-child {
    @content;
  }
}

@mixin first-child {
  &:first-child {
    @content;
  }

  &.first-child {
    @content;
  }
}

@mixin nth-child-even {
  &:nth-child(even) {
    @content;
  }

  &.nth-child-even {
    @content;
  }
}

@mixin nth-child-odd {
  &:nth-child(odd) {
    @content;
  }

  &.nth-child-odd {
    @content;
  }
}
